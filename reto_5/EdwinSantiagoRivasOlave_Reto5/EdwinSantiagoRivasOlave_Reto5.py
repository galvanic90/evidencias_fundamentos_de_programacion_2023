# -*- coding: utf-8 -*-
"""RETO5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17jYLC0oTKxh_z0ge3iPL2kxSqEDXrv1K
"""

import statistics
# Se usa la libreria statistics para resolver operaciones complejas que se encuentran en el código

students = []
# Se usa la variable students = [] con corchetes para que no tome datos que se ejecutaron anteriormente y empiece con la lista vacía

# Se define el menú principal de las opciones que desea realizar el usuario
def menu_principal():
    print('''\nGestor de notas (Estudiantes)
    1. Agregar
    2. Buscar
    3. Modificar
    4. Cancelación de materia
    5. Resultados por estudiante
    6. Informe de grupo
    7. Salir
    ''')
    opcion_elegida = input('Indique la opción a realizar: ')

    if opcion_elegida == '1':
        agregar_estudiante()
    elif opcion_elegida == '2':
        buscar_estudiante()
    elif opcion_elegida == '3':
        modificar_notas_estudiante()
    elif opcion_elegida == '4':
        cancelacion_materia()
    elif opcion_elegida == '5':
        resultados_por_estudiante()
    elif opcion_elegida == '6':
        informe_grupal()
    elif opcion_elegida == '7':
        print('Saliste del gestor de notas')

# 'identificacion_student' es la llave para acceder a la información de los estudiantes
def agregar_estudiante():
    identificacion_student = int(input('Ingrese el número de identificación: '))
    nombre_student = input('Ingrese el nombre: ')
    correo_student = input('Ingrese el correo: ')
    telefono_student = int(input('Ingrese el telefono: '))
    fecha_nacimiento_student = input('Ingrese fecha nacimiento (dd/mm/aaaa): ')
    nota1_student = float(input('Ingrese nota 1: '))
    nota2_student = float(input('Ingrese nota 2: '))
    nota3_student = float(input('Ingrese nota 3: '))
    nota4_student = float(input('Ingrese nota 4: '))

    datos_estudiante = {
        'Identificación del estudiante:' : identificacion_student,
        'Nombre del estudiante:' : nombre_student,
        'Correo electrónico:' : correo_student,
        'Telefono del estudiante:' : telefono_student,
        'Fecha de nacimiento:' : fecha_nacimiento_student,
        'Nota 1:' : nota1_student,
        'Nota 2:' : nota2_student,
        'Nota 3:' : nota3_student,
        'Nota 4:' : nota4_student,
        }

    # el método '.append' se usa para agregar todos los estudiantes que se quiera
    students.append(datos_estudiante)
    print(f'\n--- Se agregó el estudiante {nombre_student} correctamente ---')

    menu_principal()

def buscar_estudiante():
    id_estudiante = int(input('Ingrese el ID del estudiante que busca: '))
    student_encontrado = False

    for identificacion in students:
        if identificacion['Identificación del estudiante:'] == id_estudiante:
            print(f'\n--- Estudiante encontrado ---')

            # Se recorre las claves y los valores del diccionario con el método .items
            for clave, valor in identificacion.items():
                print(clave, valor)

            student_encontrado = True
            break

    if not student_encontrado:
        print('\n--- No se encontró el estudiante ---')

    menu_principal()

def modificar_notas_estudiante():
    # Se usa parte del código de la función def buscar_estudiante para encontrarlo con ID y modificar las notas
    id_estudiante = int(input('Ingrese el ID del estudiante al que va modificarle las notas: '))
    student_encontrado = False

    for identificacion in students:
        if identificacion['Identificación del estudiante:'] == id_estudiante:
            print(f'\n--- Estudiante encontrado ---')

            # El usuario ingresa las nuevas notas del estudiante que eligio por medio del ID
            print(f'A continuación ingrese las notas nuevas del estudiante con ID {id_estudiante}')
            nota1_nueva = float(input('Nota 1: '))
            nota2_nueva = float(input('Nota 2: '))
            nota3_nueva = float(input('Nota 3: '))
            nota4_nueva = float(input('Nota 4: '))

            # Llamar las claves del diccionario con las 4 notas para actualizarlas con las nuevas que ingreso el usuario
            identificacion['Nota 1:'] = nota1_nueva
            identificacion['Nota 2:'] = nota2_nueva
            identificacion['Nota 3:'] = nota3_nueva
            identificacion['Nota 4:'] = nota4_nueva

            print('\n--- Notas actualizadas correctamente ---')

            student_encontrado = True
            break

    if not student_encontrado:
        print('\n--- --- No se encontró el estudiante --- ---')

    menu_principal()

def cancelacion_materia():
    # Se usa parte del código de la función def buscar_estudiante para encontrarlo con ID y cancelar materia
    id_estudiante = int(input('Ingrese el ID del estudiante al que va cancelarle la materia: '))
    student_encontrado = False

    for identificacion in students:
        if identificacion['Identificación del estudiante:'] == id_estudiante:
            print(f'\n--- Estudiante encontrado ---')

            # Se pide al usario si quiere confirma o no la cancelacion de la materia del estudiante
            print('\n¿Cancelar materia del estudiante? 1. Si | 2. No')

            # El usuario tomará la decisión de aceptar o no cancelar al estudiante
            opcion_cancelar = input(f'Acepta la cancelación de materia del estudiante con ID {id_estudiante}: ')

            if opcion_cancelar == '1':
                students.remove(identificacion)
                print('\n--- Estudiante cancelado correctamente ---')

            else:
                print('\n--- No se cancelo la materia del estudiante ---')

            student_encontrado = True
            break

    if not student_encontrado:
        print('\n--- No se encontró el estudiante ---')

    menu_principal()

def resultados_por_estudiante():
    # Se usa parte del código de la función def buscar_estudiante para encontrarlo con ID y realizar las operaciones de sus notas
    id_estudiante = int(input('Ingrese el ID del estudiante para ver su información de notas: '))
    student_encontrado = False

    for identificacion in students:
        if identificacion['Identificación del estudiante:'] == id_estudiante:
            print(f'\n--- Estudiante encontrado ---')

            nota1_student = identificacion['Nota 1:']
            nota2_student = identificacion['Nota 2:']
            nota3_student = identificacion['Nota 3:']
            nota4_student = identificacion['Nota 4:']

            # Promedio de notas del estudiane por su ID
            promedio_notas = (nota1_student + nota2_student + nota3_student + nota4_student) / 4
            print(f'Notas registradas: ID {id_estudiante}')
            print(f'{nota1_student} + {nota2_student} + {nota3_student} + {nota4_student} / 4')
            print(f'• Nota final del estudiante con ID {id_estudiante} es: {promedio_notas}')
            # Yo aqui

            # Este código informa si el estudiante estuvo por encima o por debajo de la media, teniendo en cuenta la función 'def calcular_promedio_grupo()'
            promedio_grupo = calcular_promedio_grupo()
            if promedio_notas > promedio_grupo:
                print(f'• El estudiante está por encima de la media del grupo ({promedio_grupo})')
            elif promedio_notas < promedio_grupo:
                print(f'• El estudiante está por debajo de la media del grupo ({promedio_grupo})')
            else:
                print(f'• El estudiante está en la media del grupo ({promedio_grupo})')

            # Este código informa si el estudiante ganó o perdió el curso, teniendo en cuenta el la variable 'promedio_notas'
            if promedio_notas >= 3.0:
                print('• El estudiante ganó el curso')
            else:
                print('• El estudiante perdió el curso')

            # Este código informa en qué percentil se encuentra el estudiante, teniendo en cuenta la función 'def calcular_percentill()'
            notas_grupo = [estudiante['Nota 1:'] for estudiante in students] + [estudiante['Nota 2:'] for estudiante in students] + [estudiante['Nota 3:'] for estudiante in students] + [estudiante['Nota 4:'] for estudiante in students]
            percentil = calcular_percentil(promedio_notas, notas_grupo)
            print(f'• El estudiante se encuentra en el {percentil}% percentil del grupo')

            student_encontrado = True
            break

    if not student_encontrado:
        print('\n--- No se encontró el estudiante ---')

    menu_principal()

# Calculos para el promedio del grupo y el percentil, consultado por medio web y googleando

# Se define la función 'calcular_promedio_grupo' para calcular el promedio del grupo tomando como dato sus notas
def calcular_promedio_grupo():
    notas_grupo = [estudiante['Nota 1:'] for estudiante in students] + [estudiante['Nota 2:'] for estudiante in students] + [estudiante['Nota 3:'] for estudiante in students] + [estudiante['Nota 4:'] for estudiante in students]
    promedio_grupo = statistics.mean(notas_grupo)
    return promedio_grupo

# Se define la función 'calcular_percentil' para calcular el percentil de cada estudiante tomando como dato sus notas
def calcular_percentil(valor, datos):
    datos.sort()
    n = len(datos)
    percentil = (sum([1 for x in datos if x < valor]) / n) * 100
    return round(percentil, 2)

# Definición de la funcion 'informe grupal' para calcular todos los datos requeridos del reto 5
def informe_grupal():
    # Se definen las variables de las funciones que empiezan:
    # DESDE la funcion 'calcular_promedio_total', HASTA la funcion 'calcular_moda_notas'
    promedio_total = calcular_promedio_total()
    total_estudiantes = len(students)
    estudiantes_encima = contar_estudiantes_por_encima_de_promedio(promedio_total)
    estudiantes_debajo = contar_estudiantes_por_debajo_de_promedio(promedio_total)
    estudiantes_iguales = contar_estudiantes_iguales_al_promedio(promedio_total)
    valor_minimo_ganar = 3.0  # Se establece el valor a partir del cual se considera ganar
    estudiantes_ganadores = contar_estudiantes_ganadores(valor_minimo_ganar)
    estudiantes_perdedores = contar_estudiantes_perdedores(valor_minimo_ganar)
    moda = calcular_moda_notas()
    mediana = calcular_mediana_notas()
    desviacion_estandar = calcular_desviacion_estandar_notas()

    # Imprime el resultado de todas la variables que se encuentran en la 'función informe_grupal'
    print('\n--- Informe grupal de los estudiantes matriculados ---')
    print(f'• Promedio total de todas las notas: {promedio_total}')
    print(f'• Número de estudiantes por encima del promedio: {estudiantes_encima}')
    print(f'• Número de estudiantes por debajo del promedio: {estudiantes_debajo}')
    print(f'• Número de estudiantes iguales al promedio: {estudiantes_iguales}')
    print(f'• Número de estudiantes ganadores: {estudiantes_ganadores}')
    print(f'• Número de estudiantes perdedores: {estudiantes_perdedores}')
    print(f'• Porcentaje de estudiantes ganadores: {calcular_porcentaje(estudiantes_ganadores, total_estudiantes)}%')
    print(f'• Porcentaje de estudiantes perdedores: {calcular_porcentaje(estudiantes_perdedores, total_estudiantes)}%')
    print(f'• Moda de las notas: {moda}')
    print(f'• Mediana de las notas: {mediana}')
    print(f'• Desviación estándar de las notas: {desviacion_estandar}')

    menu_principal()


# La funcion 'calcular_promedio_total' resuelve el promedio total
def calcular_promedio_total():
    notas_totales = []
    for estudiante in students:
        for clave, valor in estudiante.items():
            if clave.startswith('Nota'):
                notas_totales.append(valor)

    promedio_total = sum(notas_totales) / len(notas_totales)
    return promedio_total

# La funcion 'calcular_promedio_estudiante' resuelve el promedio de los estudiantes
def calcular_promedio_estudiante(estudiante):
    notas_estudiante = [valor for clave, valor in estudiante.items() if clave.startswith('Nota')]
    return sum(notas_estudiante) / len(notas_estudiante)

# La funcion 'contar_estudiantes_por_encima_de_promedio' resuelve el conteo de los estudiantes registrados por el usuario y calcula si esta por encima del promedio
def contar_estudiantes_por_encima_de_promedio(promedio):
    estudiantes_encima = sum(1 for estudiante in students if calcular_promedio_estudiante(estudiante) > promedio)
    return estudiantes_encima

# La funcion 'contar_estudiantes_por_debajo_de_promedio' resuelve el conteo de los estudiantes registrados por el usuario y calcula si esta por debajo del promedio
def contar_estudiantes_por_debajo_de_promedio(promedio):
    estudiantes_debajo = sum(1 for estudiante in students if calcular_promedio_estudiante(estudiante) < promedio)
    return estudiantes_debajo

# La funcion 'contar_estudiantes_iguales_al_promedio' resuelve el conteo de los estudiantes registrados por el usuario y calcula si el promedio es similar con los estudiantes registrados
def contar_estudiantes_iguales_al_promedio(promedio):
    estudiantes_iguales = sum(1 for estudiante in students if calcular_promedio_estudiante(estudiante) == promedio)
    return estudiantes_iguales

# La funcion 'contar_estudiantes_ganadores' calcula cuantos aprobaron la materia
def contar_estudiantes_ganadores(valor_minimo_ganar):
    estudiantes_ganadores = sum(1 for estudiante in students if calcular_promedio_estudiante(estudiante) >= valor_minimo_ganar)
    return estudiantes_ganadores

# La funcion 'contar_estudiantes_perdedores' calcula cuantos reprobaron la materia
def contar_estudiantes_perdedores(valor_minimo_ganar):
    estudiantes_perdedores = sum(1 for estudiante in students if calcular_promedio_estudiante(estudiante) < valor_minimo_ganar)
    return estudiantes_perdedores

# La funcion 'calcular porcentaje' calcula el % de todos los estudiantes registrados
def calcular_porcentaje(estudiantes, total_estudiantes):
    porcentaje = (estudiantes / total_estudiantes) * 100
    return porcentaje

# La funcion 'calcular_moda_notas' halla la moda por medio de la notas de los estudiantes matriculados
# El método 'startwith' en las funciones que se utilizó, verifica si el nombre de la clave empieza con 'Nota' y toma todas las notas registradas
def calcular_moda_notas():
    notas_totales = []
    for estudiante in students:
        for clave, valor in estudiante.items():
            if clave.startswith('Nota'):
                notas_totales.append(valor)
    moda = statistics.mode(notas_totales)
    return moda

# La funcion 'calcular_mediana_notas' halla la mediana por medio de la notas de los estudiantes matriculados
def calcular_mediana_notas():
    notas_totales = []
    for estudiante in students:
        for clave, valor in estudiante.items():
            if clave.startswith('Nota'):
                notas_totales.append(valor)
    mediana = statistics.median(notas_totales)
    return mediana

# La funcion 'calcular_moda_notas' halla la desviación estandar por medio de la notas de los estudiantes matriculados
def calcular_desviacion_estandar_notas():
    notas_totales = []
    for estudiante in students:
        for clave, valor in estudiante.items():
            if clave.startswith('Nota'):
                notas_totales.append(valor)
    desviacion_estandar = statistics.stdev(notas_totales)
    return desviacion_estandar

    # Se vuelve y usa parte de los códigos anterior para encontrar a los estudiantes registrados
    for identificacion in students:
        if identificacion.get('Identificación del estudiante:') == id_estudiante:
            print(f'\n--- Estudiante encontrado ---')
            imprimir_notas_estudiante(identificacion)

            promedio_notas = sum(identificacion.get(f'Nota {i}:', 0) for i in range(1, 5)) / 4
            print(f'Promedio de notas del estudiante con ID {id_estudiante} es: {promedio_notas}')

            # Cuando se cumplen las sentencias se imprime lo que se define en cada sentencia
            promedio_grupo = calcular_promedio_total()
            if promedio_notas > promedio_grupo:
                print(f'El estudiante está por encima de la media del grupo ({promedio_grupo})')
            elif promedio_notas < promedio_grupo:
                print(f'El estudiante está por debajo de la media del grupo ({promedio_grupo})')
            else:
                print(f'El estudiante está en la media del grupo ({promedio_grupo})')

            # Se establece el valor que da el aval de que el estudianto aprobo la materia
            valor_minimo_ganar = 3.0
            if promedio_notas >= valor_minimo_ganar:
                print('El estudiante ganó el curso')
            else:
                print('El estudiante perdió el curso')

            # Toma los estudiantes registrados y calcula el percentil del estudiante
            notas_grupo = [sum(identificacion.get(f'Nota {i}:', 0) for i in range(1, 5)) for identificacion in students]
            percentil = sum(1 for nota in notas_grupo if nota < promedio_notas) / len(notas_grupo) * 100
            print(f'El estudiante se encuentra en el {percentil}% percentil del grupo')

            break

    menu_principal()

menu_principal()